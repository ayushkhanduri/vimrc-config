"--------------------------------------------------------------
"
"General Settings
"
"---------------------------------------------------------------

set expandtab

"set shiftwidth=2
"set tabstop=2
set hidden
"set signcolumn=yes:2 -> guess doesn't work in vim
"set relativenumber -> causing a lot of confusion with numbering
set number
set termguicolors
set undofile
set spell
set title
set ignorecase
set smartcase
set wildmode=longest:full,full
set nowrap
set list
set listchars=tab:▶\ ,trail:∙ "gives trailing dots when unnecessary space
set mouse=a
set scrolloff=8
set sidescrolloff=8
set nojoinspaces
set splitright
set clipboard=unnamedplus
set confirm
set exrc
filetype plugin indent on
set statusline+=col:\ %c,
"setting up backup
"set backup
"set backupdir=


"-----------------------------------------------------------------
"
"KEYMAPS (WILL BE SUBJECTIVE , FIRST UNDERSTAND HOW KEY MAPPING WORKS)
"
"-----------------------------------------------------------------



"-----------------------------------------------------------------
"
"PLUGINS
"
"------------------------------------------------------------------


call plug#begin()

Plug 'tpope/vim-commentary' "for commenting
Plug 'neoclide/coc.nvim', {'branch': 'release'} "vs code for vim 
Plug 'dracula/vim' "theme
"Plug 'voldikss/vim-floaterm' "floating terminal
Plug 'tpope/vim-fugitive' "git in vim
Plug 'preservim/nerdtree' "file tree
"Plug 'Xuyuanp/nerdtree-git-plugin' "As the name says
"Plug 'ycm-core/YouCompleteMe' "autocomplete , NOTE: Causing a lot of issues
"with key binding , it is better to disable it
"Plug 'vim-syntastic/syntastic' "syntax checking
Plug 'nvie/vim-flake8' "PIP guideline
Plug 'kien/ctrlp.vim' "Searching file
"Plug 'wincent/command-t' "searching file 
" Plug 'sheerun/vim-polyglot'
Plug 'vim-syntastic/syntastic' "Syntax checking for multiple languages
Plug 'tomasiser/vim-code-dark' "Vs code theme
Plug 'nvie/vim-flake8' "syntax and file checker
Plug 'mhinz/vim-startify' "Just a fancy start screen for vim
Plug 'vim-airline/vim-airline' "Status bar to print information at the bottom
Plug 'kh3phr3n/python-syntax' "Python syntac hightlighting
"Plug 'nvim-lua/popup' "NOT SURE: But might be a popup for telescope
Plug 'nvim-lua/plenary.nvim' "requirement for telescope
Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.0' } "Better fuzzy search
Plug 'davidhalter/jedi-vim' "autocomplete for python
Plug 'preservim/tagbar' "showing tags at the right
"Plug 'honza/vim-snippets' "adding custom snippets
call plug#end()

"---------------------------------------------------------------
"
"Config for plugins
"
"--------------------------------------------------------------

colorscheme codedark

"YCM
"let g:ycm_autoclose_preview_window_after_insertion = 1
"let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_global_ycm_extra_conf='~/.ycm_extra_conf.py'

""Python pipenv support for autocomplete

"" Point YCM to the Pipenv created virtualenv, if possible
"" At first, get the output of 'pipenv --venv' command.
"let pipenv_venv_path = system('pipenv --venv')
"" The above system() call produces a non zero exit code whenever
"" a proper virtual environment has not been found.
"" So, second, we only point YCM to the virtual environment when
"" the call to 'pipenv --venv' was successful.
"" Remember, that 'pipenv --venv' only points to the root directory
"" of the virtual environment, so we have to append a full path to
"" the python executable.
"if shell_error == 0
"  let venv_path = substitute(pipenv_venv_path, '\n', '', '')
"  let g:ycm_python_binary_path = venv_path . '/bin/python'
"else
"  let g:ycm_python_binary_path = 'python'
"endif

"NERDTREE
autocmd VimEnter * NERDTree
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>
map <leader>r :NERDTreeFind<cr>

"SYNTASTIC
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
"let g:syntastic_typescript_checkers = ['tslint']
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"COC CONFIG
let g:coc_global_extensions = [
  \ 'coc-snippets',
  \ 'coc-pairs',
  \ 'coc-tsserver',
  \ 'coc-eslint', 
  \ 'coc-prettier', 
  \ 'coc-json',
  \ 'coc-python',
  \ 'coc-html'
  \ ]
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
command! -nargs=0 Prettier :CocCommand prettier.formatFile " run prettier on save

"CTRLP VIM
set wildignore+=*/node_modules/*

"NEW TAB
" nnoremap <C-Left> :tabprevious<CR>
" nnoremap <C-Right> :tabnext<CR>
" nnoremap <C-j> :tabprevious<CR>
" nnoremap <C-k> :tabnext<CR>

"Telescope
let mapleader = " "
" nnoremap <leader>ps :lua require('telescope.builtin').grep_string({ search = vim.fn.input("Grep For > ")}) <CR>
nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>

"CTAGS
" au BufWritePost *.py silent! !ctags -R &

" COC and YMC

" nnoremap gd :YcmCompleter GoTo<CR>
" nnoremap gd :call CocActionAsync('jumpDefinition')<CR>
" nnoremap gd :YcmCompleter GetDoc<CR>
" nnoremap gd :call CocActionAsync('doHover')<CR>

"COC
" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" inoremap <silent><expr> <TAB>
"       \ coc#pum#visible() ? coc#pum#next(1) :
"       \ CheckBackspace() ? "\<Tab>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" TAGBAR

nmap <F8> :TagbarToggle<CR>
